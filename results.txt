============================= test session starts =============================
platform win32 -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- E:\projects\rank_rocket_calendar_stacker\.venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: E:\projects\rank_rocket_calendar_stacker
collecting ... collected 4 items

tests/routes/test_oauth_flow.py::test_authorize_redirect FAILED          [ 25%]
tests/routes/test_oauth_flow.py::test_callback_exchanges_token FAILED    [ 50%]
tests/test_oauth.py::test_authorize_redirect FAILED                      [ 75%]
tests/test_oauth.py::test_callback_exchanges_token FAILED                [100%]

================================== FAILURES ===================================
___________________________ test_authorize_redirect ___________________________

client = <FlaskClient <Flask 'src.main'>>, setup_db = None

    def test_authorize_redirect(client, setup_db):
        oauth = OAuthCredential(
            client_id=1,
            google_client_id="test-google-client",
            google_client_secret="test-secret",
            google_redirect_uri="http://localhost/callback",
            scopes='["scope1", "scope2"]',
            is_valid=False,
        )
        db.session.add(oauth)
        db.session.commit()
    
        with patch("src.routes.oauth_flow.Flow.from_client_config") as mock_flow:
            mock_instance = MagicMock()
            mock_instance.authorization_url.return_value = (
                "http://mock.google.auth",
                "state-token",
            )
            mock_flow.return_value = mock_instance
    
>           response = client.get(f"/authorize/{oauth.id}", follow_redirects=False)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\routes\test_oauth_flow.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\werkzeug\test.py:1162: in get
    return self.open(*args, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\testing.py:235: in open
    response = super().open(
.venv\Lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

oauth_id = 1

    @oauth_flow_bp.route("/authorize/<int:oauth_id>")
    def authorize(oauth_id):
        oauth_entry = OAuthCredential.query.get(oauth_id)
        if not oauth_entry:
            return "OAuth credentials not found", 404
    
        client_config = {
            "web": {
                "client_id": oauth_entry.google_client_id,
                "client_secret": oauth_entry.google_client_secret,
>               "redirect_uris": [oauth_entry.google_redirect_uri],
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
            }
        }
E       AttributeError: 'OAuthCredential' object has no attribute 'google_redirect_uri'

src\routes\oauth_flow.py:53: AttributeError
________________________ test_callback_exchanges_token ________________________

client = <FlaskClient <Flask 'src.main'>>, setup_db = None

    def test_callback_exchanges_token(client, setup_db):
        oauth = OAuthCredential(
            client_id=1,
            google_client_id="test-google-client",
            google_client_secret="test-secret",
            google_redirect_uri="http://localhost/callback",
            scopes='["scope1", "scope2"]',
            is_valid=False,
        )
        db.session.add(oauth)
        db.session.commit()
    
        with client.session_transaction() as sess:
            sess["oauth_state"] = "valid-state"
            sess["oauth_id"] = oauth.id
    
        with patch("src.routes.oauth_flow.Flow.from_client_config") as mock_flow:
            mock_instance = MagicMock()
            mock_instance.fetch_token.return_value = None
            mock_instance.credentials.token = "access-token"
            mock_instance.credentials.refresh_token = "refresh-token"
            mock_instance.credentials.expiry = "2025-12-31T23:59:59"
            mock_flow.return_value = mock_instance
    
>           response = client.get("/callback?state=valid-state&code=fake-code")
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\routes\test_oauth_flow.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\werkzeug\test.py:1162: in get
    return self.open(*args, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\testing.py:235: in open
    response = super().open(
.venv\Lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @oauth_flow_bp.route("/callback")
    def callback():
        state = session.get("state")
        oauth_id = session.get("oauth_id")
        if not oauth_id:
            return "Missing session oauth_id", 400
    
        oauth_entry = OAuthCredential.query.get(oauth_id)
        if not oauth_entry:
            return "OAuth credentials not found", 404
    
        client_config = {
            "web": {
                "client_id": oauth_entry.google_client_id,
                "client_secret": oauth_entry.google_client_secret,
>               "redirect_uris": [oauth_entry.google_redirect_uri],
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
            }
        }
E       AttributeError: 'OAuthCredential' object has no attribute 'google_redirect_uri'

src\routes\oauth_flow.py:90: AttributeError
___________________________ test_authorize_redirect ___________________________

client = <FlaskClient <Flask 'src.main'>>, setup_db = None

    def test_authorize_redirect(client, setup_db):
        oauth = OAuthCredential(
            client_id=1,
            google_client_id="test-google-client",
            google_client_secret="test-secret",
            google_redirect_uri="http://localhost/callback",
            scopes='["scope1", "scope2"]',
            is_valid=False,
        )
        db.session.add(oauth)
        db.session.commit()
    
        with patch("src.routes.oauth_flow.Flow.from_client_config") as mock_flow:
            mock_instance = MagicMock()
            mock_instance.authorization_url.return_value = (
                "http://mock.google.auth",
                "state-token",
            )
            mock_flow.return_value = mock_instance
    
>           response = client.get(f"/authorize/{oauth.id}", follow_redirects=False)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_oauth.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\werkzeug\test.py:1162: in get
    return self.open(*args, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\testing.py:235: in open
    response = super().open(
.venv\Lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

oauth_id = 1

    @oauth_flow_bp.route("/authorize/<int:oauth_id>")
    def authorize(oauth_id):
        oauth_entry = OAuthCredential.query.get(oauth_id)
        if not oauth_entry:
            return "OAuth credentials not found", 404
    
        client_config = {
            "web": {
                "client_id": oauth_entry.google_client_id,
                "client_secret": oauth_entry.google_client_secret,
>               "redirect_uris": [oauth_entry.google_redirect_uri],
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
            }
        }
E       AttributeError: 'OAuthCredential' object has no attribute 'google_redirect_uri'

src\routes\oauth_flow.py:53: AttributeError
________________________ test_callback_exchanges_token ________________________

client = <FlaskClient <Flask 'src.main'>>, setup_db = None

    def test_callback_exchanges_token(client, setup_db):
        oauth = OAuthCredential(
            client_id=1,
            google_client_id="test-google-client",
            google_client_secret="test-secret",
            google_redirect_uri="http://localhost/callback",
            scopes='["scope1", "scope2"]',
            is_valid=False,
        )
        db.session.add(oauth)
        db.session.commit()
    
        with client.session_transaction() as sess:
            sess["oauth_state"] = "valid-state"
            sess["oauth_id"] = oauth.id
    
        with patch("src.routes.oauth_flow.Flow.from_client_config") as mock_flow:
            mock_instance = MagicMock()
            mock_instance.fetch_token.return_value = None
            mock_instance.credentials.token = "access-token"
            mock_instance.credentials.refresh_token = "refresh-token"
            mock_instance.credentials.expiry = "2025-12-31T23:59:59"
            mock_flow.return_value = mock_instance
    
>           response = client.get("/callback?state=valid-state&code=fake-code")
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_oauth.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\werkzeug\test.py:1162: in get
    return self.open(*args, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\testing.py:235: in open
    response = super().open(
.venv\Lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @oauth_flow_bp.route("/callback")
    def callback():
        state = session.get("state")
        oauth_id = session.get("oauth_id")
        if not oauth_id:
            return "Missing session oauth_id", 400
    
        oauth_entry = OAuthCredential.query.get(oauth_id)
        if not oauth_entry:
            return "OAuth credentials not found", 404
    
        client_config = {
            "web": {
                "client_id": oauth_entry.google_client_id,
                "client_secret": oauth_entry.google_client_secret,
>               "redirect_uris": [oauth_entry.google_redirect_uri],
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
            }
        }
E       AttributeError: 'OAuthCredential' object has no attribute 'google_redirect_uri'

src\routes\oauth_flow.py:90: AttributeError
============================== warnings summary ===============================
tests/routes/test_oauth_flow.py::test_authorize_redirect
tests/test_oauth.py::test_authorize_redirect
  E:\projects\rank_rocket_calendar_stacker\src\routes\oauth_flow.py:45: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    oauth_entry = OAuthCredential.query.get(oauth_id)

tests/routes/test_oauth_flow.py::test_callback_exchanges_token
tests/test_oauth.py::test_callback_exchanges_token
  E:\projects\rank_rocket_calendar_stacker\src\routes\oauth_flow.py:82: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    oauth_entry = OAuthCredential.query.get(oauth_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/routes/test_oauth_flow.py::test_authorize_redirect - AttributeEr...
FAILED tests/routes/test_oauth_flow.py::test_callback_exchanges_token - Attri...
FAILED tests/test_oauth.py::test_authorize_redirect - AttributeError: 'OAuthC...
FAILED tests/test_oauth.py::test_callback_exchanges_token - AttributeError: '...
======================== 4 failed, 4 warnings in 0.71s ========================
